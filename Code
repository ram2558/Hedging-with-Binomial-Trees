!pip install numpy pandas plotly

import numpy as np

class BinomialTree:
    def __init__(self, S0, K, T, r, sigma, N, option_type='call'):
        """
        S0: Initial stock price
        K: Strike price
        T: Time to maturity (in years)
        r: Risk-free rate
        sigma: Volatility
        N: Number of time steps
        option_type: 'call' or 'put'
        """
        self.S0 = S0
        self.K = K
        self.T = T
        self.r = r
        self.sigma = sigma
        self.N = N
        self.option_type = option_type
        self.dt = T / N  # Time step
        self.u = np.exp(sigma * np.sqrt(self.dt))  # Up factor
        self.d = 1 / self.u  # Down factor
        self.p = (np.exp(r * self.dt) - self.d) / (self.u - self.d)  # Risk-neutral probability

    def build_tree(self):
        """Build the binomial tree for stock prices."""
        tree = np.zeros((self.N + 1, self.N + 1))
        for i in range(self.N + 1):
            for j in range(i + 1):
                tree[j, i] = self.S0 * (self.u ** (i - j)) * (self.d ** j)
        return tree

    def option_price(self):
        """Calculate the option price using the binomial tree."""
        tree = self.build_tree()
        option_tree = np.zeros_like(tree)

        # Option value at maturity
        if self.option_type == 'call':
            option_tree[:, self.N] = np.maximum(tree[:, self.N] - self.K, 0)
        else:
            option_tree[:, self.N] = np.maximum(self.K - tree[:, self.N], 0)

        # Backward induction
        for i in range(self.N - 1, -1, -1):
            for j in range(i + 1):
                option_tree[j, i] = np.exp(-self.r * self.dt) * (
                    self.p * option_tree[j, i + 1] + (1 - self.p) * option_tree[j + 1, i + 1]
                )
        return option_tree[0, 0], tree, option_tree

class DeltaHedging:
    def __init__(self, tree_model):
        self.tree_model = tree_model

    def calculate_delta(self, tree, option_tree):
        """Calculate delta at each node."""
        delta_tree = np.zeros_like(tree)
        for i in range(self.tree_model.N):
            for j in range(i + 1):
                delta_tree[j, i] = (option_tree[j, i + 1] - option_tree[j + 1, i + 1]) / (
                    tree[j, i + 1] - tree[j + 1, i + 1]
                )
        return delta_tree

    def simulate_hedging(self, tree, option_tree):
        """Simulate the hedging process."""
        delta_tree = self.calculate_delta(tree, option_tree)
        portfolio_value = np.zeros_like(tree)
        portfolio_value[0, 0] = option_tree[0, 0] - delta_tree[0, 0] * tree[0, 0]

        for i in range(1, self.tree_model.N + 1):
            for j in range(i + 1):
                portfolio_value[j, i] = (
                    delta_tree[j, i - 1] * tree[j, i] +
                    (portfolio_value[j, i - 1] - delta_tree[j, i - 1] * tree[j, i - 1]) * np.exp(self.tree_model.r * self.tree_model.dt)
                )
        return portfolio_value

def compare_portfolios(tree, option_tree, hedged_portfolio):
    """Compare the portfolio values with and without hedging."""
    unhedged_portfolio = option_tree[:, -1]  # Option value at maturity
    hedged_portfolio = hedged_portfolio[:, -1]  # Hedged portfolio value at maturity

    print("Unhedged Portfolio Value at Maturity:", unhedged_portfolio[0])
    print("Hedged Portfolio Value at Maturity:", hedged_portfolio[0])

import plotly.graph_objects as go

def visualize_tree(tree, title):
    """Visualize the binomial tree."""
    fig = go.Figure()
    for i in range(tree.shape[1]):
        for j in range(i + 1):
            fig.add_trace(go.Scatter(
                x=[i, i + 1],
                y=[tree[j, i], tree[j, i + 1]],
                mode='lines+markers',
                line=dict(color='blue')
            ))
            fig.add_trace(go.Scatter(
                x=[i, i + 1],
                y=[tree[j, i], tree[j + 1, i + 1]],
                mode='lines+markers',
                line=dict(color='blue')
            ))
    fig.update_layout(title=title, xaxis_title="Time Steps", yaxis_title="Stock Price")
    fig.show()

import plotly.graph_objects as go

def visualize_tree(tree, title):
    """Visualize the binomial tree."""
    fig = go.Figure()
    for i in range(tree.shape[1] - 1): # Changed loop condition
        for j in range(i + 1):
            fig.add_trace(go.Scatter(
                x=[i, i + 1],
                y=[tree[j, i], tree[j, i + 1]],
                mode='lines+markers',
                line=dict(color='blue')
            ))
            fig.add_trace(go.Scatter(
                x=[i, i + 1],
                y=[tree[j, i], tree[j + 1, i + 1]],
                mode='lines+markers',
                line=dict(color='blue')
            ))
    fig.update_layout(title=title, xaxis_title="Time Steps", yaxis_title="Stock Price")
    fig.show()

if __name__ == "__main__":
    # Define parameters
    S0 = 100  # Initial stock price
    K = 105   # Strike price
    T = 1     # Time to maturity
    r = 0.05  # Risk-free rate
    sigma = 0.2  # Volatility
    N = 3     # Number of time steps
    option_type = 'call'

    # Build the binomial tree and calculate option price
    tree_model = BinomialTree(S0, K, T, r, sigma, N, option_type)
    option_price, stock_tree, option_tree = tree_model.option_price()
    print("Option Price:", option_price)

    # Simulate delta hedging
    hedging = DeltaHedging(tree_model)
    hedged_portfolio = hedging.simulate_hedging(stock_tree, option_tree)

    # Compare portfolios
    compare_portfolios(stock_tree, option_tree, hedged_portfolio)

    # Visualize the stock tree
    visualize_tree(stock_tree, "Binomial Tree for Stock Prices")

